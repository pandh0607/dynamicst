import json
import os
from pathlib import Path

sample_name = config['sample']
whitelist = config['whitelist']

CBlen = int(config['CBlen'])
UMIlen = int(config['UMIlen'])
CBstart = int(config['CBstart'])
UMIstart = int(config['UMIstart'])

outputdir = Path(config['outputdir']).absolute()

###get soft path
home = Path(config['softhome'])

###get TMPDIR
TMP = Path(config['TMP'])

cellcalling_method = str(config['cellcalling'])

rule all:
    input:
        outputdir/f"{sample_name}/outs/analysis/clustering/graphclust/clusters.csv",

def cellcalling(cells,method = "EmptyDrops_CR"):
    if method == "EmptyDrops_CR":
        return f"EmptyDrops_CR {cells} 0.99 10 45000 90000 500 0.01 20000 0.01 10000 "
    elif method == "TopCells":
        return f"TopCells {cells} "
    else:
        return f"CellRanger2.2 {cells} 0.99 10 "
    

rule RunSTARsolo:
    input:
        R1 = config['R1'],
        R2 = config['R2'],
    params:
        genomeDir = config['transcriptome'],
        sample = config['sample'],
        outputdir = Path(config['outputdir']).absolute(),
        cells = config['expect_cells'],
        cellcalling = cellcalling(config['expect_cells'],cellcalling_method),
        pigz = str(home/'bin/pigz'),
        whitelist = Path(config['whitelist']).absolute(),
    threads:
        int(config['cores'])
    output:
        filtered = str(outputdir/f"{sample_name}/Gene/filtered/matrix.mtx"),
        raw = str(outputdir/f"{sample_name}/Gene/raw/matrix.mtx"),
        bam = str(outputdir/f"Aligned.sortedByCoord.out.bam"),
        STARSummary = outputdir/f"{sample_name}/Gene/Summary.csv",
        UMIpreCell = outputdir/f"{sample_name}/Gene/UMIperCellSorted.txt",
        STARLog = outputdir/"Log.final.out",
    singularity:
        str(home/'sif/DynamicEX.sif')
    log:
        str(outputdir/"logs/RunSTARsolo.log")
    shell:
        "cd {params.outputdir}&&/opt/anaconda3/bin/STAR  --genomeDir {params.genomeDir} --readFilesCommand {params.pigz} -dc --clipAdapterType CellRanger4 "
        "--readFilesIn {input.R2} {input.R1} --limitGenomeGenerateRAM 100000000000 --limitBAMsortRAM 100000000000 "
        "--soloType CB_UMI_Simple --soloCBwhitelist {params.whitelist} --soloBarcodeReadLength 0 "
        f"--runThreadN {{threads}} --soloCBstart {CBstart} --soloCBlen {CBlen} --soloUMIstart {UMIstart} --soloUMIlen {UMIlen} --soloUMIfiltering MultiGeneUMI_CR "
        "--soloUMIdedup 1MM_CR --soloOutFileNames {params.sample}/ "
        "--soloCellFilter {params.cellcalling} --outSAMtype BAM SortedByCoordinate "
        "--outSAMattributes GX GN CB UB --soloFeatures Gene 1>{log} 2>&1"

###
rule fastp:
    input:
        R2 = config['R2'],
    output:
        str(outputdir/"fastp.json")
    threads:
        6 if int(int(config['cores'])/2) > 6 else int(int(config['cores'])/2)
    singularity:
        str(home/'sif/fastp_v0.20.sif')
    log:
        str(outputdir/"logs/fastp.log")
    shell:
        "/opt/conda/bin/fastp -i {input} -j {output} -w {threads} 1>{log} 2>&1"

rule IndexSTARBam:
    input:
        rules.RunSTARsolo.output.bam
    threads:
        int(int(config['cores'])/2)
    output:
        str(outputdir/f"Aligned.sortedByCoord.out.bam.bai")
    singularity:
        str(home/'sif/DynamicEX.sif')
    shell:
        "/opt/anaconda3/bin/sambamba index -t {threads} {input}"


rule ConfidentlyReads:
    input:
        rules.IndexSTARBam.output
    params:
        bam = str(outputdir/f"Aligned.sortedByCoord.out.bam")
    output:
        bam = str(outputdir/f"Aligned.sortedByCoord.MapQ255.out.bam"),
        bai = str(outputdir/f"Aligned.sortedByCoord.MapQ255.out.bam.bai"),
    log:
        str(outputdir/"logs/ConfidentlyReads.log")
    threads:
        int(int(config['cores'])/2)
    singularity:
        str(home/'sif/DynamicEX.sif')
    shell:
        "/opt/anaconda3/bin/sambamba view -t {threads} --filter='mapping_quality==255' {params.bam} --format bam -o {output.bam}"

rule MappingRegion:
    input:
        rules.ConfidentlyReads.output
    params:
        outdir = str(outputdir/"qual_summary"),
        gtf = config["gtf"],
    output:
        qc = str(outputdir/"qual_summary/rnaseq_qc_results.txt"),
    threads:
        int(int(config['cores'])/4)
    singularity:
        str(home/'sif/DynamicEX.sif')
    log:
        str(outputdir/"logs/MappingRegion.log")
    shell:
        "/opt/anaconda3/bin/qualimap rnaseq -a uniquely-mapped-reads -outformat PDF -outdir {params.outdir} "
        "-bam {input} -gtf {params.gtf} "
        "-p strand-specific-forward --java-mem-size=32G 1>{log} 2>&1"

        
rule SeqSaturation:
    input:
        bam = rules.ConfidentlyReads.output.bam,
        bai = rules.ConfidentlyReads.output.bai
    params:
        barcodes_tsv = str(outputdir/f"{sample_name}/Gene/filtered/barcodes.tsv"),
        Summary = str(outputdir/f"{sample_name}/Gene/Summary.csv"),
        output = str(outputdir)
    output:
        str(outputdir/"SequencingSaturation.pdf")
    threads:
        int(config['cores'])
    log:
        str(outputdir/"logs/SeqSaturation.log")
    singularity:
        str(home/'sif/DynamicEX.sif')
    shell:
        f"""export TMPDIR={TMP}&&/usr/local/bin/python {home}/script/GetSequencingSaturation.py --bam {{input.bam}} --barcodes {{params.barcodes_tsv}} --nthreads {{threads}} --ouputdir {{params.output}} --summary {{params.Summary}} 2>>{{log}}
        """

###/opt/script/GetSequencingSaturation.py
rule Rename:
    input:
        rules.MappingRegion.output,
        rules.SeqSaturation.output,
        fastp_qc = rules.fastp.output
    output:
        outputdir/f"{sample_name}/outs/filtered_feature_bc_matrix/matrix.mtx.gz",
        outputdir/f"{sample_name}/outs/metrics_summary.csv",
    params:
        filtered = outputdir/f"{sample_name}/outs/filtered_feature_bc_matrix",
        raw      = outputdir/f"{sample_name}/outs/raw_feature_bc_matrix",
        starfd   = outputdir/f"{sample_name}/Gene/filtered/*",
        starrw   = outputdir/f"{sample_name}/Gene/raw/*",
        starsummary  = outputdir/f"{sample_name}/Gene/Summary.csv",
        summary  =  outputdir/f"{sample_name}/outs/metrics_summary.csv",
        pigz     = str(home/'bin/pigz'),
        script = "/opt/script/Rename.py",
    threads:
        int(config['cores'])
    singularity:
        str(home/'sif/DynamicEX.sif')
    shell:
        """
mkdir -p {params.filtered} {params.raw};
/usr/local/bin/python {params.script} {params.starsummary} {params.summary} {threads} {params.pigz}
cp -rf {params.starfd} {params.filtered};
cp -rf {params.starrw} {params.raw};
        """

#rule MakeReport:
#    input:
#        rename = rules.Rename.output,
#        RnaSeqMetrics = rules.MappingRegion.output.qc,
#        HE = config["HE"],
#        inputdir = outputdir/f"{sample_name}/Gene",
#        metrics_summary = outputdir/f"{sample_name}/outs/metrics_summary.csv",
#        sampleinfo = outputdir/"config.json",
#        STARLog = outputdir/"Log.final.out",
#        template = home/"template/DynamicST_Report_temp.html",
#        saturation = rules.SeqSaturation.output,
#        fastp_qc = rules.fastp.output
#    params:
#        script = "/opt/script/MakeWPSReport.py",
#        QCdir = outputdir/f"{sample_name}/outs/"
#    output:
#        outputdir/f"{sample_name}/outs/web_summary.html"
#    shell:
#        f"/home/pandunhuang/anaconda3/envs/DynamicTS/bin/python {{params.script}} --softhome {home} --RnaSeqMetrics {{input.RnaSeqMetrics}} "
#        "--HE {input.HE} --inputdir {input.inputdir} --sampleinfo {input.sampleinfo} --STARLog {input.STARLog} "
#        "--report_temp {input.template} --output {params.QCdir} --fastp {input.fastp_qc} --MetricsSummary {input.metrics_summary}&&"
#        f"cp -r {home}/template/static {{params.QCdir}}"
#        
rule GraphClust:
    input:
        rules.Rename.output
    params:
        outputdir/f"{sample_name}/outs/filtered_feature_bc_matrix"
    output:
        outputdir/f"{sample_name}/outs/analysis/clustering/graphclust/clusters.csv",
        outputdir/f"{sample_name}/outs/analysis/clustering/kmeans_10_clusters/clusters.csv",
    singularity:
        str(home/'sif/scanpy.sif')
    shell:
        f"/opt/venv/bin/python /opt/script/Cluster.py --inputdir {{params}};"
        f"rm -rf {outputdir}/.java {outputdir}/.config {outputdir}/.cache "