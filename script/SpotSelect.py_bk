import json
import argparse
import numpy as np
import pandas as pd
from pathlib import Path
from collections import Counter
from joblib import Parallel,delayed
from pandarallel import pandarallel

parser = argparse.ArgumentParser()
parser.add_argument('--sam',required=True,help="sam file")
parser.add_argument('--barcode',default=None,help="spot list file under tissue")
parser.add_argument('--samplename',required=True,help="sample name")
parser.add_argument('--analysisdir',required=True,help="Analysis Dir")

args = parser.parse_args()

AnalysisDir             = Path(args.analysisdir)
SampleName              = args.samplename
Samfile                 = args.sam
summary                 = AnalysisDir/SampleName/"Gene/Summary.csv"
barcodefile             = args.barcode
configfile              = AnalysisDir/"config.json"
featuresfile            = AnalysisDir/SampleName/"Gene/filtered/features.tsv"
bn = dict(Counter([i.strip() for i in open(barcodefile,encoding='utf-8')]))
barcodelist = [b for b in bn if bn[b]==1]

Summary = pd.read_csv(summary,index_col=0,header=None).to_dict()[1]

def BarcodeInfo(Samfile):
    f = open(Samfile)
    d={}
    barcodes_list=[]
    for line in f:
        *others,GX,GN,barcode,umi = line.strip().split("\t")
        barcode = barcode[5:]
        umi = umi[5:]
        geneid = GX[5:]
        if geneid != "-" and barcode != "-":
            if barcode in barcodelist:
                barcodes_list.append([barcode,umi,geneid])
            d.setdefault(barcode,{})
            d[barcode].setdefault("num",0)
            d[barcode].setdefault("umi",[])
            d[barcode].setdefault("gene",[])
            d[barcode]['num']+=1
            d[barcode]['umi'].append(umi)
            d[barcode]['gene'].append(geneid)
    return d,barcodes_list

def downsample(frac, df):
    """
    对DataFrame进行下采样，并计算UMI饱和度、spot的基因中位数

    参数：
    frac：下采样比例，介于0和1之间
    df：包含barcode、umi和geneid等相关信息的DataFrame

    返回值：
    umis_saturation：UMI饱和度
    avg_reads_per_spot：每个spot的平均读取数
    median_gene_per_spot：spot基因的中位数
    """

    # 如果下采样比例为0，则直接返回0
    if frac == 0:
        return 0, 0, 0
    d = {}
    n_deduped_reads = 0
    N_umis = 0
    N_reads = 0

    # 对DataFrame进行下采样
    dt = df.sample(frac=frac, random_state=0)
    median_gene = {}
    spots = set(dt[0].values)
    total_reads = frac * NumberOfReads

    # 遍历下采样后的数据
    for value in dt.values:
        bc, umi, gene = value
        median_gene.setdefault(bc, {})
        median_gene[bc][gene] = 1
        key = "".join(value)
        d.setdefault(key, 0)
        d[key] += 1

    # 计算UMI饱和度、读取饱和度和每个位置基因数量的中位数
    for key in d:
        if d[key] == 1:
            n_deduped_reads += 1
        N_umis += 1
        N_reads += d[key]

    umis_saturation = (1 - n_deduped_reads / N_umis)
    reads_saturation = (1 - n_deduped_reads / N_reads)
    median_gene2 = {bc: len(median_gene[bc]) for bc in median_gene}
    Median_Gene_Per_Spot = pd.DataFrame(median_gene2.items())[1].median()
    
    return umis_saturation, total_reads / len(spots), int(Median_Gene_Per_Spot)

def BarcodeSummary(barcode):
    l=[]
    dt = df_under_tissue.loc[barcode]
    genes = dt['gene']
    for gindex,gene in enumerate(features,1):
        gene_count = genes.count(gene)
        if gene_count != 0 :
            l.append([str(gindex),str(barcodes.index(barcode)+1),str(gene_count)])
    return l
    
def FilterMatrix():
    with open(str(AnalysisDir/SampleName/"Gene/filtered/barcodes.tsv"),"w",encoding='utf-8') as out:
        for barcode in barcodes:
            out.write(f"{barcode}\n")
    matrix = open(str(AnalysisDir/SampleName/"Gene/filtered/matrix.mtx"),"w")
    matrix.write("%%MatrixMarket matrix coordinate integer general\n")
    matrix.write("%\n")
    df = pd.DataFrame(barcodes,columns=['barcode'])
    pandarallel.initialize(nb_workers=20)
    df['gene_count'] = df['barcode'].parallel_apply(BarcodeSummary)
    l=[j for i in df['gene_count'] for j in i]
    matrix.write(f"{len(features)} {len(barcodes)} {len(l)}\n")
    for i in l:
        matrix.write(" ".join(i)+"\n")
    matrix.close()

d,barcodes_list = BarcodeInfo(Samfile)
df_chip         = pd.DataFrame(d).T
df_barcodes     = pd.DataFrame(barcodes_list)


NumberOfReads = int(Summary['Number of Reads'])
ValidBarcodes = Summary['Reads With Valid Barcodes']
downsample_saturation = Parallel(n_jobs=10)(delayed(downsample)(frac,df_barcodes) for frac in [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0])
df_saturation = pd.DataFrame(downsample_saturation,columns=['Saturation','Mean_Reads_Per_Spot','Median_Gene_Per_Spot'])

Saturation = df_saturation['Saturation'].values[-1]
metrics = {}
df_under_tissue = df_chip.loc[barcodelist]
df_under_tissue['unique gene'] = df_under_tissue['gene'].apply(lambda e:len(set(e)))
df_under_tissue['unique umi']  = df_under_tissue['umi'].apply(lambda e:len(set(e)))



###Spots
metrics['Fraction Reads in Spots Under Tissue'] = f"{df_under_tissue['num'].sum()/df_chip['num'].sum():.2%}"
metrics['Number of Spots Under Tissue']         = len(barcodelist)
metrics['Mean Reads per Spot']                  = NumberOfReads/len(barcodelist)
metrics['UMIs in Spots']                        = int(df_under_tissue['unique umi'].sum())
metrics['Mean Reads Under Tissue per Spot']     = int(df_under_tissue['num'].mean())
metrics["Median UMI Counts per Spot"]           = int(df_under_tissue['unique umi'].median())
metrics['Median Genes per Spot']                = f"{df_under_tissue['unique gene'].median()}"
metrics['Total Genes Detected']                 = len({gene for values in df_under_tissue['gene'].values for gene in values})


###Sequencing
metrics['Number of Reads']                      = NumberOfReads
metrics['Valid Barcodes']                       = ValidBarcodes
metrics['Sequencing Saturation']                = Saturation

Summary.update(metrics)
pd.DataFrame(Summary.items()).to_csv(AnalysisDir/SampleName/"Gene/Summary.csv",index=False,header=False)
barcodes = barcodelist
features = [i.split("\t")[0] for i in open(featuresfile)]
FilterMatrix()
df_saturation.to_csv(AnalysisDir/"saturation.csv")